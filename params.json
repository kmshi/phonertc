{"name":"PhoneRTC","tagline":"WebRTC for Cordova apps","body":"## PhoneRTC\r\n\r\nWebRTC for Cordova apps!\r\n\r\n**Note:** PhoneRTC is still at very early stages. Right now, it's more like a proof-of-concept than a production-ready library. \r\n\r\n### Features\r\n\r\n* Completely open source\r\n* Android and iOS support\r\n* Simple JavaScript API\r\n* Video & Voice chat\r\n* Use your own servers without relying on any third-parties\r\n* Perfect for hybrid mobile apps using Angular\r\n\r\n### Requirements\r\n\r\n* TURN server - [rfc5766-turn-server](https://code.google.com/p/rfc5766-turn-server/) on Amazon EC2 is a good option here\r\n* Signaling server - [SignalR](http://signalr.net/) if you are using ASP.NET or [socket.io](http://socket.io/) if you are using Node.js are recommended\r\n\r\n### Upcoming features\r\n\r\n* Group chat\r\n* API documentation\r\n* Volume control\r\n\r\n### How does PhoneRTC differ from OpenTok, Weemo, etc?\r\n\r\nWebRTC is a peer-to-peer protocol, but it still needs some servers: a signaling server for initializing the call and a proxy server if the peer-to-peer connection fails.\r\n\r\nOther solutions, such as OpenTok and Weemo, require you to use their own third-party servers. That means they are much easier to use, but that also means that they are less open, have a subscription model, and you are generally less in control.\r\n\r\nPhoneRTC allows you to use your own servers, without relying on any third-parties.\r\n\r\n### Setting up a TURN server\r\n\r\nTo set up a TURN server, create an Amazon EC2 instance with the latest Ubuntu. Open the following ports in the instance security group:\r\n\r\n    TCP 443\r\n    TCP 3478-3479\r\n    TCP 32355-65535\r\n    UDP 3478-3479\r\n    UDP 32355-65535\r\n\r\nOpen SSH and run:\r\n\r\n    sudo apt-get install rfc5766-turn-server\r\n    \r\nNext, edit `/etc/turnserver.conf` and change the following options:\r\n\r\n    listening-ip=<private EC2 ip address>\r\n    relay-ip=<private EC2 ip address>\r\n    external-ip=<public EC2 ip address>\r\n    min-port=32355 \r\n    max-port=65535\r\n    realm=<your domain>\r\n    \r\nAlso uncomment the following options:\r\n\r\n    lt-cred-mech\r\n    fingerprint \r\n\r\nNext, open `/etc/turnuserdb.conf` and add a new user at the end of the file. The format is: \r\n\r\n    username:password\r\n\r\nTo start the TURN server, run the following command:\r\n\r\n    sudo /etc/init.d/rfc5766-turn-server start\r\n\r\n### Plugin Installation\r\n\r\nInstall Cordova:\r\n\r\n    npm install -g cordova ios-deploy\r\n    \r\nCreate a new Cordova project:\r\n\r\n    cordova create <name>\r\n    cordova platform add ios android\r\n\r\nAdd the plugin:\r\n\r\n    cordova plugin add https://github.com/alongubkin/phonertc.git\r\n    \r\n### Usage Example \r\n```javascript\r\nvar phonertc = cordova.require('com.dooble.phonertc.PhoneRTC');\r\n\r\nphonertc.call({ \r\n    isInitator: true, // Caller or callee?\r\n    turn: {\r\n        host: 'turn:turn.example.com:3478',\r\n        username: 'user',\r\n        password: 'pass'\r\n    },\r\n    sendMessageCallback: function (data) {\r\n        // PhoneRTC wants to send a message to your target, use\r\n        // your signaling server here to send the message.\r\n        signaling.sendMessage(target, { \r\n            type: 'webrtc_handshake',\r\n            data: data\r\n        });\r\n    },\r\n    answerCallback: function () {\r\n        alert('Callee answered!');\r\n    },\r\n    disconnectCallback: function () {\r\n        alert('Call disconnected!');\r\n    },\r\n    video: {  // Remove this property if you don't want video chat\r\n    \tlocalVideo: document.getElementById('localVideo'),\r\n        remoteVideo: document.getElementById('remoteVideo')\r\n    }\r\n});\r\n\r\nsignaling.onMessage = function (message) {\r\n    if (message.type === 'webrtc_handshake') {\r\n        // when a message is received from the signaling server, \r\n        // notify the PhoneRTC plugin.\r\n        phonertc.receiveMessage(message.data);\r\n    }\r\n};\r\n```\r\n\r\n### Building\r\n\r\nBuilding for Android is easy. You can just:\r\n\r\n    cordova build android\r\n    cordova run android\r\n\r\nIn iOS, it's slightly more complicated. Run the following code. It will prepare all of the web code to be deployed to your device. It must be re-run every time you change any web code:\r\n\r\n    cordova prepare ios\r\n    \r\nOpen the project in Xcode and change the following options in the project settings (these must be changed for both your project and the CordovaLib project):\r\n\r\n    Valid Architectures => armv7\r\n    Build Active Architecture Only => No\r\n\r\nIn the target choose a real iOS device, not the simulator, otherwise it won't build. You should now be able to run this on your device.\r\n\r\nTo create an IPA, go to Product > Archive.\r\n\r\n### Note on native libraries\r\n\r\nThe `libs` directory contains compiled libraries from the [official WebRTC project](https://code.google.com/p/webrtc/). If you want to build them yourself, use the following tutorials:\r\n\r\nAndroid: https://code.google.com/p/webrtc/source/browse/trunk/talk/examples/android/README\r\n\r\niOS: https://code.google.com/p/webrtc/source/browse/trunk/talk/app/webrtc/objc/README\r\n\r\n### Contributors\r\n\r\niOS Video Support: [@egreenmachine](https://github.com/egreenmachine) (BitCoin Donations: ```12pDZFVov6rDPjhGTz9Xj4qqegdoCJF3Ea```)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}